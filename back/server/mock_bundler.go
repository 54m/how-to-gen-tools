//go:build mock
// +build mock

// Code generated by api_gen. DO NOT EDIT.
// generated version: 2.3.1
package server

import (
	"net/http"

	types_api_583f3ba4 "github.com/54m/how-to-gen-tools/back/interfaces/api"
	types_users_094d125b "github.com/54m/how-to-gen-tools/back/interfaces/api/users"
	ctrl_api_ae589cac "github.com/54m/how-to-gen-tools/back/server/mock/controller/api"
	ctrl_users_d38b4d82 "github.com/54m/how-to-gen-tools/back/server/mock/controller/api/users"
	apierror "github.com/54m/how-to-gen-tools/back/server/pkg/apierror"
	props "github.com/54m/how-to-gen-tools/back/server/props"
	echo "github.com/labstack/echo/v4"
	xerrors "golang.org/x/xerrors"
)

func addRoutes(e *echo.Echo, p *props.ControllerProps, opt *options) {
	add := func(method, path string, handler func(c echo.Context) (interface{}, error)) {
		e.Add(method, path, func(c echo.Context) error {
			var werr *apierror.APIError

			res, err := handler(c)

			if err != nil {
				if !opt.disableErrorHandling && xerrors.As(err, &werr) {
					c.Logger().Errorf("%+v", werr)
					return c.JSON(werr.Status, werr.Body)
				}
				return xerrors.Errorf("%s %s returned an error: %w", method, path, err)
			}
			if res == nil {
				return nil
			}

			return c.JSON(http.StatusOK, res)
		})
	}

	{
		ctrl := ctrl_api_ae589cac.NewGetHealthCheckController(p)

		add("GET", "/api/health_check", func(c echo.Context) (interface{}, error) {
			req := new(types_api_583f3ba4.GetHealthCheckRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/health_check): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.GetHealthCheck(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(GetHealthCheck) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl_users_d38b4d82.NewDeleteUserController(p)

		add("DELETE", "/api/users/:user_id", func(c echo.Context) (interface{}, error) {
			req := new(types_users_094d125b.DeleteUserRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/users/:user_id): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.DeleteUser(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(DeleteUser) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl_users_d38b4d82.NewGetController(p)

		add("GET", "/api/users/", func(c echo.Context) (interface{}, error) {
			req := new(types_users_094d125b.GetRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/users/): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.Get(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(Get) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl_users_d38b4d82.NewGetUserController(p)

		add("GET", "/api/users/:user_id", func(c echo.Context) (interface{}, error) {
			req := new(types_users_094d125b.GetUserRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/users/:user_id): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.GetUser(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(GetUser) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl_users_d38b4d82.NewPostController(p)

		add("POST", "/api/users/", func(c echo.Context) (interface{}, error) {
			req := new(types_users_094d125b.PostRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/users/): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.Post(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(Post) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

	{
		ctrl := ctrl_users_d38b4d82.NewPutUserController(p)

		add("PUT", "/api/users/:user_id", func(c echo.Context) (interface{}, error) {
			req := new(types_users_094d125b.PutUserRequest)
			if err := c.Bind(req); err != nil {
				c.Logger().Errorf("failed to bind a request for (/api/users/:user_id): %+v", err)
				return nil, c.JSON(http.StatusBadRequest, map[string]interface{}{
					"code":    http.StatusBadRequest,
					"message": "invalid request.",
				})
			}
			if err := c.Validate(req); err != nil && err != echo.ErrValidatorNotRegistered {
				return nil, xerrors.Errorf("the validator returned an error: %w", err)
			}

			res, err := ctrl.PutUser(c, req)

			if err != nil {
				return nil, xerrors.Errorf("the handler(PutUser) returned an error: %w", err)
			}

			if res == nil {
				return nil, nil
			}

			return res, nil
		})
	}

}
